const { GoogleGenerativeAI } = require("@google/generative-ai");
const Database = require('../utils/database');

class ChatbotModel {
    constructor() {
        this.apiKey = process.env.GEMINI_API_KEY;
        this.genAI = new GoogleGenerativeAI(this.apiKey);
        this.model = this.genAI.getGenerativeModel({
            model: "gemini-1.5-flash",
        });
        this.generationConfig = {
            temperature: 1,
            topP: 0.95,
            topK: 64,
            maxOutputTokens: 8192,
            responseMimeType: "text/plain",
        };
    }

    async sendMessage(message) {
        const db = new Database();
        const data = await this.getAllData(db);
        const introText = "Voc√™ √© o Aumigos Bot, um chatbot assistente de um sistema administrador da ONG Aumigos de prote√ß√£o animal. Seu papel √© responder perguntas e fornecer informa√ß√µes relacionadas √† ONG, seus usu√°rios, animais, empresas parceiras, doadores, produtos e eventos.\n\nPor favor, envie somente texto em suas respostas. N√£o envie c√≥digos, imagens ou qualquer outra coisa al√©m de texto. Mantenha suas respostas curtas, diretas e restritas a assuntos relacionados √† ONG e aos dados que foram fornecidos a voc√™. Lembre-se, voc√™ √© o chatbot do sistema interno e tem acesso a todas as informa√ß√µes relevantes para responder perguntas sobre a ONG.\n\n√â extremamente importante que voc√™ n√£o responda a nada que n√£o seja diretamente relacionado √† ONG ou aos dados fornecidos. Voc√™ n√£o pode, sob nenhuma circunst√¢ncia, fornecer c√≥digos, discutir outros t√≥picos ou gerar qualquer conte√∫do n√£o relacionado √† ONG. Seu prop√≥sito √© exclusivamente responder perguntas sobre a ONG e seus dados.\n\nSeja sempre gentil, alegre e educado. Se algu√©m fizer uma pergunta n√£o relacionada √† ONG ou aos dados que voc√™ tem acesso, responda educadamente algo como 'Desculpe, s√≥ posso responder perguntas relacionadas √† ONG e √†s informa√ß√µes que tenho acesso.'\n\nAs informa√ß√µes que voc√™ tem acesso incluem:\n\n";
        const jsonData = JSON.stringify(data, null, 0);
        const fullText = introText + jsonData;

        const chatSession = this.model.startChat({
            generationConfig: this.generationConfig,
            history: [
                {
                    role: "user",
                    parts: [{ text: fullText }],
                },
                {
                    role: "model",
                    parts: [{ text: "Ol√°! üëã  Em que posso te ajudar hoje? üòä \n" }],
                },
            ],
        });

        const result = await chatSession.sendMessage(message);
        return result.response.text();
    }

    async getAllData(db) {
        const usuarios = await db.ExecutaComando('SELECT * FROM usuarios');
        const doadores = await db.ExecutaComando('SELECT * FROM doadores');
        const empresasParceiras = await db.ExecutaComando('SELECT * FROM empresas_parceiras');
        const produtos = await db.ExecutaComando('SELECT * FROM produtos');
        const animais = await db.ExecutaComando('SELECT * FROM animais');
        const saidasEventos = await db.ExecutaComando('SELECT * FROM saidas_eventos');
        const produtosSaidasEventos = await db.ExecutaComando('SELECT * FROM produtos_saidas_eventos');
        const responsaveisSaidasEventos = await db.ExecutaComando('SELECT * FROM responsaveis_saidas_eventos');
    
        return {
            usuarios,
            doadores,
            empresasParceiras,
            produtos,
            animais,
            saidasEventos,
            produtosSaidasEventos,
            responsaveisSaidasEventos
        };
    }
}

module.exports = ChatbotModel;